<?xml version="1.0"?>
<project name="OpenPetra-tasks">

<!-- Get OpenPetra root directory 
 @hack: We are accessing the private variable from the include task of nant.
        This is the only place, where this information is saved! -->
<script language="C#" prefix="OP" >
  <imports>
    <import namespace="NAnt.Core.Tasks" />
    <import namespace="System.Reflection" />
  </imports>
  <code>
    <![CDATA[
    [Function("get-current-buildfile")]
    public static string getCurrentBuildfile( ) {
      const BindingFlags eFlags = BindingFlags.Static | BindingFlags.Public 
                                  | BindingFlags.NonPublic | BindingFlags.GetField; 
      System.Reflection.FieldInfo field = typeof(NAnt.Core.Tasks.IncludeTask).GetField("_currentBasedir", eFlags); 
      if (field == null) {
        throw new ArgumentException("'_currentBasedir' is not a valid static member in '" + 
          typeof(NAnt.Core.Tasks.IncludeTask) + "'.");
      }
      string returnvalue = (string) field.GetValue(null);
      return returnvalue;
    }
    
    [Function("GUIDGen")]
    public static string GUIDGen(  ) {
        return Guid.NewGuid().ToString("D").ToUpper();
    }

    [Function("GetReleaseIDFromVersionTxt")]
    public static string GetReleaseIDFromVersionTxt(string APath)
    {
        StreamReader sr = new StreamReader(APath + Path.DirectorySeparatorChar + "db" + Path.DirectorySeparatorChar + "version.txt");
        string version = sr.ReadLine().Replace("-", ".");
        sr.Close();

        string BuildNumber = Environment.GetEnvironmentVariable("BUILD_NUMBER");

        if ((BuildNumber != null) && (BuildNumber.Length > 0))
        {
            version = version.Substring(0, version.LastIndexOf(".") + 1) + BuildNumber;
        }

        return version;
    }
       
    [Function("IsAutoGeneratedFile")]
    public static bool IsAutoGeneratedFile(string filename)
    {
      return filename.Contains("-generated.");
    }

    /// get the relative path, that leads from the workingDirectory to the absolutePath
    [Function("GetRelativePath")]
    public static string GetRelativePath(string absolutePath, string workingDirectory)
    {
      absolutePath = absolutePath.Replace("\\", "/");
      workingDirectory = workingDirectory.Replace("\\", "/");
      
      int countSame = 0;
      while (countSame < absolutePath.Length 
             && countSame < workingDirectory.Length 
             && absolutePath[countSame] == workingDirectory[countSame])
      {
          countSame ++;
      }

      // go back to the last directory seperator
      countSame = absolutePath.Substring(0, countSame).LastIndexOf("/") + 1;
      string Result = absolutePath.Substring(countSame);
      
      if (countSame > 0)
      {
          // how many directories do we need to go up from the working Directory
          while (countSame < workingDirectory.Length)
          {
              if (workingDirectory[countSame] == '/')
              {
                  Result = "../" + Result;
              }
              countSame ++;
          }
      }

      return Result;
    }

    /// get the absolute path, if it is not yet absolute.
    [Function("MakeAbsolute")]
    public static string MakeAbsolute(string relativePath, string workingDirectory)
    {
        if (Path.IsPathRooted(relativePath))
        {
            return relativePath;
        }
        
        return Path.GetFullPath(workingDirectory + Path.DirectorySeparatorChar + relativePath);
    }

    private static void GetProgramFiles(out string ProgramFiles, out string ProgramFilesX86)
    {
        ProgramFiles = Environment.GetEnvironmentVariable("ProgramFiles");
        ProgramFilesX86 = Environment.GetEnvironmentVariable("ProgramFiles(x86)");
        if (ProgramFiles == ProgramFilesX86)
        {
            ProgramFiles = Environment.GetEnvironmentVariable("ProgramW6432");
        }
    }

    /// for Windows: check if the program exists in the 32bit or 64bit location of the Program Files.
    /// returns the full path of the file
    [Function("GetFileInProgramDirectory")]
    public static string GetFileInProgramDirectory(string relativePath)
    {
        string ProgramFiles;
        string ProgramFilesX86;
        GetProgramFiles(out ProgramFiles, out ProgramFilesX86);
        if (File.Exists(ProgramFiles + relativePath))
        {
            return ProgramFiles + relativePath;
        }
        else if (File.Exists(ProgramFilesX86 + relativePath))
        {
            return ProgramFilesX86 + relativePath;
        }
        return ProgramFiles + relativePath;
    }

    /// for Windows: check if the directory exists in the 32bit or 64bit location of the Program Files.
    /// returns the full path of the file
    [Function("GetDirInProgramDirectory")]
    public static string GetDirInProgramDirectory(string relativePath)
    {
        string ProgramFiles;
        string ProgramFilesX86;
        GetProgramFiles(out ProgramFiles, out ProgramFilesX86);
        if (Directory.Exists(ProgramFiles + relativePath))
        {
            return ProgramFiles + relativePath;
        }
        else if (Directory.Exists(ProgramFilesX86 + relativePath))
        {
            return ProgramFilesX86 + relativePath;
        }
        return ProgramFiles + relativePath;
    }
]]>
    </code>
</script>



<!-- directories -->
<property name="dir.buildfiles" value="${OP::get-current-buildfile()}" 
          overwrite="false" />
<property name="dir.incdir" value="${directory::get-parent-directory(dir.buildfiles)}"
          overwrite="false" />
<property name="dir.root" value="${directory::get-parent-directory(dir.incdir)}"
          overwrite="false" />


<!-- tempdir handling for build server -->
<property name="tempdir" value="${path::combine(dir.root,'tmp')}" overwrite="false" />
<mkdir dir="${tempdir}" failonerror="false"/>
<!-- All known variants for the temp directory -->
<setenv name="TMPDIR" value="${tempdir}"/>
<setenv name="TMP" value="${tempdir}"/>
<setenv name="TEMP" value="${tempdir}"/>


<!-- Import user specific properties, if available -->
<property name="userconfig.file" value="${path::combine(dir.root,'OpenPetra.build.config.my')}" overwrite="false" />
<include buildfile="${userconfig.file}" verbose="true" if="${file::exists(userconfig.file)}"/>
<if test="${not file::exists(userconfig.file)}">
    <property name="userconfig.file" value="${path::combine(dir.root,'OpenPetra.build.config')}" overwrite="true" />
    <include buildfile="${userconfig.file}" verbose="true" if="${file::exists(userconfig.file)}"/>
</if>
<if test="${not file::exists(userconfig.file)}">
    <property name="userconfig.file" value="${path::combine(dir.root,'../OpenPetra.build.config')}" overwrite="true" />
    <include buildfile="${userconfig.file}" verbose="true" if="${file::exists(userconfig.file)}"/>
</if>

<property name="dir.jsclient" value="../js-client/" overwrite="false" />

<!-- Version number -->
<property name="ReleaseID" value="${OP::GetReleaseIDFromVersionTxt(dir.root)}" overwrite="false"  />

<!-- more directories -->
 <!-- incdir -->
<property name="dir.incdir.template" value="${path::combine(dir.incdir, 'template')}"
          overwrite="false" />
<property name="dir.incdir.template.etc" value="${path::combine(dir.incdir.template, 'etc')}"
          overwrite="false" />
<property name="dir.incdir.template.src" value="${path::combine(dir.incdir.template, 'src')}"
          overwrite="false" />
<property name="dir.incdir.cfg" value="${path::combine(dir.incdir, 'cfg')}"
          overwrite="false" />

 <!-- csharp -->
<property name="dir.csharp" value="${path::combine(dir.root, 'csharp')}"
          overwrite="false" />
<property name="dir.3rdParty" value="${path::combine(dir.csharp, 'ThirdParty')}"
          overwrite="false" />
<property name="dir.nuget" value="${path::combine(dir.csharp, 'ThirdParty/packages')}"
          overwrite="false" />
<property name="dir.sql" value="${path::combine(dir.csharp, 'ICT/Petra/Server/sql')}"
          overwrite="false" />
 <!-- delivery -->
<property name="dir.delivery" value="${path::combine(dir.root, 'delivery')}"
          overwrite="false" />
<property name="DeliveryDB.dir" value="${dir.delivery}/db"/>
<property name="dir.bin" value="${path::combine(dir.delivery, 'bin')}"
          overwrite="false" />
<property name="dir.obj" value="${path::combine(dir.delivery, 'obj')}"
          overwrite="false" />
<property name="dir.setup" value="${path::combine(dir.delivery, 'setup')}"
          overwrite="false" />
 <!-- projectfiles -->
<property name="dir.projectfiles" value="${path::combine(dir.delivery, 'projects')}"
          overwrite="false" />
<property name="uuidFile" value="${path::combine(dir.projectfiles, 'projectuuid.map')}"
          overwrite="false" />
<property name="namespaceFile" value="${path::combine(dir.projectfiles, 'namespace.map')}"
          overwrite="false" />
<property name="namespaceFile3rdParty" value="${path::combine(dir.3rdParty, 'namespace.map')}"
          overwrite="false" />
<property name="projectDependenciesFile" value="${path::combine(dir.projectfiles, 'project.map')}"
          overwrite="false" />
<property name="projectfiles.templates-list" value="vscode" overwrite="false" />
<property name="devenv-msbuild" value="vscode" overwrite="false" />
 <!-- webserver for delivery -->
<property name="dir.webserver" value="${path::combine(dir.delivery, 'webserver')}" overwrite="false" />
<property name="dir.webserver.bin" value="${path::combine(dir.webserver, 'bin')}" overwrite="false" />
<property name="webserver.includeSamples" value="true" overwrite="false"/>
<property name="dir.webforms.source" value="${dir.root}/webserver" overwrite="false"/>
<property name="dir.webforms.delivery" value="${dir.webserver}" overwrite="false"/>
<property name="dir.webserver.OnlineRegBackend.doc" value="" overwrite="false"/>
<property name="dir.webserver.OnlineReg.doc" value="" overwrite="false"/>
<property name="dir.webserver.DirectLinks" value="" overwrite="false"/>
<property name="dir.webserver.ProductionConfig" value="" overwrite="false"/>
<property name="dir.webserver.Formletters" value="${dir.root}/demodata/formletters" overwrite="false"/>
<property name="dir.webserver.Badges" value="" overwrite="false"/>
<property name="dir.webserver.HtmlReports" value="" overwrite="false"/>
<property name="demouser.pwd" value="demo" overwrite="false"/>
<property name="Formletters.Path" value="${dir.root}/demodata/formletters" overwrite="false"/>

<property name="I18NAnalysis.Output.dir" value="${dir.delivery}/i18nAnalysis" overwrite="false" />

<!-- build tools -->
<property name="msbuildtask.file" value="${nant::get-base-directory()}/extensions/common/neutral/NAntContrib/NAnt.Contrib.Tasks.dll"
          overwrite="false"/>
<if test="${not file::exists(msbuildtask.file)}">
    <!-- for Appveyor -->
    <property name="msbuildtask.file" value="${path::get-full-path(nant::get-base-directory() + '/../../NAnt.Contrib.Portable.0.92/tools/NAnt.Contrib.Tasks.dll')}"
          overwrite="true"/>
    <if test="${not file::exists(msbuildtask.file)}">
        <property name="msbuildtask.file" value="${path::get-full-path(nant::get-base-directory() + '/../NAnt.Contrib.Portable.0.92/tools/NAnt.Contrib.Tasks.dll')}"
            overwrite="true"/>
    </if>
</if>

<property name="Configuration" value="DEBUG" overwrite="false"/>
<property name="compileForStandalone" value="false" overwrite="false"/>
          
 <!-- db -->
<property name="dir.db" value="${path::combine(dir.root, 'db')}"
          overwrite="false" />
          
<!-- logdir -->
<property name="dir.log" value="${path::combine(dir.root, 'log')}" overwrite="false" />
<mkdir dir="${dir.log}" failonerror="false"/>
<property name="dir.var" value="${path::combine(dir.root, 'var')}" overwrite="false" />
<mkdir dir="${dir.var}" failonerror="false"/>
<property name="dir.petraclient.log" value="${dir.log}" overwrite="false" />
<property name="dir.petraclient.var" value="${dir.var}" overwrite="false" />
<property name="dir.petraclient.tmp" value="${tempdir}" overwrite="false" />
<property name="dir.petraclient.definitions" value="${path::combine(dir.csharp, 'ICT/Petra/Definitions/UINavigation.yml')}" overwrite="false" />



<!-- etc files -->
<property name="dir.etc" value="${path::combine(dir.root, 'etc')}"
          overwrite="false" />
<property name="ClientConfigFile" value="${path::combine(dir.etc, 'Client.config')}"
          overwrite="false" />
<property name="ServerConfigFile" value="${path::combine(dir.etc, 'Server.config')}"
          overwrite="false" />
<property name="ServerAdminConfigFile" value="${dir.root}/etc/ServerAdmin.config"
          overwrite="false" />
<property name="WebServerConfigFile" value="${path::combine(dir.webserver, 'web.config')}"
          overwrite="false" />

<!-- Server configuration -->
<property name="Http.Port" value="80" 
          overwrite="false" />
<property name="Server.Port" value="9000" 
          overwrite="false" />
<property name="Server.DebugLevel" value="0" 
          overwrite="false" />
<property name="Server.DBConnectionCheckInterval" value="0" 
          overwrite="false" />
<property name="DBMS.DBConnectionTimeout" value="10" 
          overwrite="false" />
<property name="DBMS.DBConnectionLifeTime" value="60" 
          overwrite="false" />
<property name="DBMS.DBCommandTimeout" value="3600" 
          overwrite="false" />
<property name="DBMS.DBWaitingTimeForCoordinatedDBAccess" value="3000"
          overwrite="false"/>
<property name="SelectedLanguage" value="en" overwrite="false" />

<!-- database -->
<property name="DBMS.Type" value="mysql"
          overwrite="false" />
<property name="DBMS.DBName" value="openpetra"
          overwrite="false"/>
<property name="DBMS.UserName" value="petraserver"
          overwrite="false"/>
<property name="DBMS.Password" value="petra"
          overwrite="false" />
<property name="DBMS.DBPort" value="3306"
          overwrite="false"/>
<property name="DBMS.DBHostOrFile" value="127.0.0.1"
          overwrite="false"/>

<property name="DBMS.Setup.DBName" value="openpetra_basedb"
          overwrite="false"/>

<!-- smtp -->
<property name="smtp.host" value="smtp.example.org"
          overwrite="false"/>
<property name="smtp.port" value="25"
          overwrite="false"/>
<property name="smtp.username" value="YourSmtpUser"
          overwrite="false"/>
<property name="smtp.password" value="YourSmtpPassword"
          overwrite="false"/>
<property name="smtp.enablessl" value="true"
          overwrite="false"/>
<property name="LocalFieldFinance.EmailAddress" value="finance@myfield.example.org"
          overwrite="false"/>
<property name="ClearingHouse.EmailAddress" value="ich@example.org"
          overwrite="false"/>

<!-- Set correct .NET platform -->
<property name="NETframework-version" value ="4.5" overwrite="false" />
<property name="nant.settings.currentframework" value="net-${NETframework-version}"
          overwrite="false" if="${platform::is-windows()}" />
<property name="nant.settings.currentframework" value="mono-${NETframework-version}" 
          overwrite="false" if="${platform::is-unix()}" />
<property name="Target-NETframework-version" value ="4.7" overwrite="false" />
<!-- compiler flags -->
<property name="compile.debug" value="true" 
          overwrite="false" />
<!-- value = anycpu causes trouble for SQLite. see bug 294 -->
<property name="compile.platform" value="x86"
          overwrite="false" />

<!-- path to custom NAnt tasks -->
<property name="Ict.Tools.NAntTasks.DLL" value="${path::combine(dir.bin,'Ict.Tools.NAntTasks.dll')}" 
          overwrite="false" />

<!-- generateORM props -->
<property name="tool-generateORM" value="${dir.bin}/Ict.Tools.GenerateORM.exe" overwrite="false" />
<property name="PetraXML.file" value="${dir.root}/db/petra.xml" overwrite="false" />

<!-- generateWinforms -->
<property name="tool-generateWinForms" value="${dir.bin}/Ict.Tools.GenerateWinForms.exe" overwrite="false" />
<property name="GUILocalisation" value="en-EN" overwrite="false"/>

<property name="tool-generateEncryptionKey" value="${dir.bin}/Ict.Tools.GenerateEncryptionKey.exe" overwrite="false" />

<property name="OrgName" value="MyOpenPetra" overwrite="false"/>
<property name="OrgNameWithoutSpace" value="${string::replace(OrgName, ' ', '')}" overwrite="false"/>
    
<!-- loglevel -->
<property name="verbose" value="false"  overwrite="false" />

<!-- Copyright, po and Assembly information -->
<property name="info.copyright.holder" value="OM International" overwrite="false" />
<property name="info.productname" value="OpenPetra" overwrite="false" />
<property name="info.assembly.copyright" value="(c) ${info.copyright.holder} 2004-2011" overwrite="false" />
<property name="info.assembly.company" value="${info.copyright.holder}" overwrite="false" />
<property name="info.contact.email" value="info@OpenPetra.org" overwrite="false" />
<property name="info.pot.msgidbugs" value="${info.contact.email}" overwrite="false" />


<!-- external utilities dependend on platform -->
<property name="external.doxygen" value="doxygen" overwrite="false"/>
<property name="external.doxygen.configfile" value="${path::combine(dir.incdir.cfg, 'doxygen.cfg')}"
          overwrite="false" />

<if test="${'win32'==platform::get-name()}" >
  <!-- MS Windows specific -->
  <property name="external.Uncrustify" value="${OP::GetFileInProgramDirectory('/uncrustify/uncrustify.exe')}" 
            overwrite="false"/>
  <property name="external.Java" value="${OP::GetFileInProgramDirectory('/Java/jre6/bin/java.exe')}" overwrite="false"/>
  <property name="external.Benerator" value="${OP::GetFileInProgramDirectory('/databene-benerator-0.7.6/bin/benerator.bat')}" overwrite="false"/>
  <property name="external.Poedit.gettext" value="${OP::GetFileInProgramDirectory('/Poedit/bin/xgettext.exe')}" overwrite="false"/>
  <property name="external.Poedit.msgfmt" value="${OP::GetFileInProgramDirectory('/Poedit/bin/msgfmt.exe')}" overwrite="false"/>
  <property name="external.Poedit.msgcat" value="${OP::GetFileInProgramDirectory('/Poedit/bin/msgcat.exe')}" overwrite="false"/> 
  <property name="NUnitVersion" value="NUnit 3.15.2" overwrite="false"/> 
  <property name="external.NUnitConsole" value="${OP::GetFileInProgramDirectory('/' + NUnitVersion + '/bin/nunit-console-x86.exe')}" overwrite="false"/>
</if>
<if test="${'win32'!=platform::get-name()}">
  <if test="${'unix'==platform::get-name()}">
    <!-- Unix specific -->
    <property name="external.Uncrustify" value="uncrustify" overwrite="false"/>
    <property name="external.Benerator" value="/usr/local/benerator/bin/benerator.sh" overwrite="false"/>
    <property name="external.Java" value="/usr/bin/java" overwrite="false"/>
    <property name="external.Poedit.gettext" value="/usr/bin/xgettext" overwrite="false"/>
    <property name="external.Poedit.msgfmt" value="/usr/bin/msgfmt" overwrite="false"/>
    <property name="external.Poedit.msgcat" value="/usr/bin/msgcat" overwrite="false"/>
    <property name="external.sql2dia" value="/usr/bin/sql2dia" overwrite="false"/>
    <!-- Fedora has version 18 -->
    <property name="libsodium.so" value="/usr/lib64/libsodium.so.18" overwrite="false"/>
    <if test="${not file::exists(libsodium.so)}">
        <!-- CentOS7 has version 23 -->
        <property name="libsodium.so" value="/usr/lib64/libsodium.so.23" overwrite="true"/>
    </if>
    <if test="${not file::exists(libsodium.so)}">
        <!-- Ubuntu 18.04 has version 23 -->
        <property name="libsodium.so" value="/usr/lib/x86_64-linux-gnu/libsodium.so.23" overwrite="true"/>
    </if>
    <if test="${not file::exists(libsodium.so)}">
        <!-- Debian Stretch has version 18 -->
        <property name="libsodium.so" value="/usr/lib/x86_64-linux-gnu/libsodium.so.18" overwrite="true"/>
    </if>

    <!-- this is where wkhtmltopdf lives when installed from upstream rpm package on CentOS -->
    <property name="external.wkhtmltopdf" value="/usr/local/bin/wkhtmltopdf" overwrite="false"/>
    <if test="${not file::exists(external.wkhtmltopdf)}">
        <!-- Ubuntu 18.04 -->
        <property name="external.wkhtmltopdf" value="/usr/bin/wkhtmltopdf" overwrite="true"/>
    </if>

    <!-- we are now using nunit3-console from nuget -->
    <property name="external.NUnitConsole" value="${dir.nuget}/NUnit.ConsoleRunner.3.15.2/tools/nunit3-console.exe" overwrite="false"/>
    <if test="${not file::exists(external.NUnitConsole)}">
        <echo>Cannot find nunit3-console.exe! Please run nant generateTools</echo>
    </if>
  </if>
  <if test="${'unix'!=platform::get-name()}">
    <echo>Unknown platform!</echo>
    <fail>Platform={$platform::get-name()} not supported! Expand the properties here!!</fail>
  </if>
</if>  

</project>
